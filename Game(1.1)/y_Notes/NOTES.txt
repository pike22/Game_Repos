ID for an Entity refers to the tag of the target Entity.

There will be a group ID to identify groups of entities
	Ex: ID = #player
		 ID = #stalfos
		 ID = #weapon
This sets of ID's refer to a group of entities.
 using .find_withtag(tagOrID) can use the above examples to find a spacific entity without looking into every created entity.

Every Entity needs to have a my_Collision func. This function will have basic uses for Collision. It will take a call from the Colliison_logic class
and use the information given to decide further what to do.


	Here is some example collision

	# #_EXAMPLE COLLIISON_#
	# for item in range(len(self.__collision)):
	# 	if item == 0:
	# 		tagOrId = self.__collision[item]
	# 		obj1	= self.__Col_Dict[tagOrId]
	# 		self.__health1 = obj1.get_health()
	# 		attack1 = obj1.get_attack()
	# 		defense1 = obj1.get_defense()
	# 	elif item == 1:
	# 		tagOrId = self.__collision[item]
	# 		obj2	= self.__Col_Dict[tagOrId]
	# 		self.__health2 = obj2.get_health()
	# 		attack2 = obj2.get_attack()
	# 		defense2 = obj2.get_defense()
	#
	# self.__health1 -= attack2
	# print(obj1.get_ID(), 'has', self.__health1, 'health')
	# obj1.set_health(self.__health1)


Current branch (__Stalfos_Rework)
	I am going to basically wipe clean stalfos and restart it. But not fully
	I am just going to delete every line then re-write what I need and get rid
	of what I don't need.








<---------------------------------------------11/29/2021-------------------------------------------------------->
<--------------------------------------------------------------------------------------------------------------->

This some necessary brain storming about what the heck I need to do for my level designer and the current problem.

alpha_LVD: this has same functionality as the games alpha.py
	class
		add -> def find_Widget(self):
					to above class

GUI_Main: will handle the creation of Frames, buttons, and other smaller items
	class
		def init(self):

		def windowSETUP(self):
			NOTE: this creates the actual frames, buttons, ect.


GUI_Statics: This is where I will store the proper image data for the rest
	class (_Mark 1_)
		def init(self):
			self.__Global_IMG

		def saveTO(self):
		def takeFrom(self):

		NOTE: Use the find_Widget func to properly name keys for IMG

	class (_Mark 2_)
		def init(self, BIMG):
			self.__buttonsIMG = BIMG
			self.__placedTK_IMG = []
			self.__placedPIL_IMG = []

		def saveTO(self):
		def takeFrom(self):

		NOTE: This is where I would create a new class that would be attached to each button


GUI_Events: this will handle and organize events and relating functions
	class
		def inif(self):
			pass

		def import_IMG(self):
		def rotation(self):
		def drag_drop(self):
		def moveIMG(self):
		def placeIMG(self):
